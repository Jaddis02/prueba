package arbol;

import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.ButtonModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;


/**
 *
 * @author ramiromartin
 * BBDD: https://blog.cerdanyaecoresort.com/tipos-de-arboles/
 */
public class Ventana extends javax.swing.JFrame {

    private DefaultListModel _datosTiposArbol;
    
    private DefaultListModel _datosArboles;

    
    private ArrayList<String> _listaImagenes;
    
    private String _host = "localhost:3306";
    private String _usuario = "root";
    private String _password = "root";
    private String _bd = "arboles";
    
    /**
     * Constructor de Ventana. Crea una nueva ventana
     */
    public Ventana() {
        
        initComponents();
        
        _datosTiposArbol = new DefaultListModel();
        _datosTiposArbol.clear();
        
        _datosArboles = new DefaultListModel();
        _datosArboles.clear();
                
        tiposArbol.setModel(_datosTiposArbol);
           
        arboles.setModel(_datosArboles);
        
        
        _listaImagenes = new ArrayList<String>();
                   
        try {
            System.out.println("> Conectando");

            // Creamos la conexión a la base de datos
            Connection conexion = (Connection) DriverManager.getConnection(
                                 "jdbc:mysql://" +
                                         _host + "/" +
                                         _bd + "?   user=" +
                                         _usuario + "&password=" +
                                         _password);


             System.out.println("> ¡Conectado!");

             // Creamos un objeto para ejecutar sentencias de SQL
             Statement sentencia = conexion.createStatement();

             // Esta es la consulta que vamos a hacer:
             String consulta = "SELECT * FROM tipos_arbol";
             
             // Ejecutamos la consulta y guardamos el resultado en una variable
             ResultSet resultado = sentencia.executeQuery(consulta);
             
             // Recorremos todas las filas de la tabla de resultados obtenida
             while(resultado.next() == true) {
                 
                 // Añadimos el valor de la columna nombre al DefaultListModel
                 _datosTiposArbol.addElement(resultado.getString("nombre"));
                 System.out.println(resultado.getString("nombre"));
             }
            
        } catch(SQLException excepcion) {
            System.out.println("> Error en la conexión: " + excepcion.getMessage());
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbed = new javax.swing.JTabbedPane();
        pArboles = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        arboles = new javax.swing.JList<>();
        pTiposArbol = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tiposArbol = new javax.swing.JList<>();
        lImagen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        verArboles = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbed.setBackground(new java.awt.Color(240, 248, 238));

        lista.setColumns(20);
        lista.setRows(5);
        jScrollPane3.setViewportView(lista);

        arboles.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(arboles);

        javax.swing.GroupLayout pArbolesLayout = new javax.swing.GroupLayout(pArboles);
        pArboles.setLayout(pArbolesLayout);
        pArbolesLayout.setHorizontalGroup(
            pArbolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pArbolesLayout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(143, 143, 143)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        pArbolesLayout.setVerticalGroup(
            pArbolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pArbolesLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(pArbolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap(277, Short.MAX_VALUE))
        );

        tabbed.addTab("Árboles", pArboles);

        pTiposArbol.setBackground(new java.awt.Color(241, 248, 242));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 51));
        jLabel1.setText("Tipos de árboles");

        tiposArbol.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tiposArbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tiposArbolMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tiposArbolMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tiposArbol);

        texto.setEditable(false);
        texto.setColumns(20);
        texto.setLineWrap(true);
        texto.setRows(5);
        texto.setWrapStyleWord(true);
        jScrollPane2.setViewportView(texto);

        verArboles.setText("Ver árboles");
        verArboles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verArbolesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pTiposArbolLayout = new javax.swing.GroupLayout(pTiposArbol);
        pTiposArbol.setLayout(pTiposArbolLayout);
        pTiposArbolLayout.setHorizontalGroup(
            pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTiposArbolLayout.createSequentialGroup()
                .addGroup(pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pTiposArbolLayout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(verArboles))
                    .addGroup(pTiposArbolLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pTiposArbolLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pTiposArbolLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(253, 253, 253)
                        .addComponent(lImagen))
                    .addGroup(pTiposArbolLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pTiposArbolLayout.setVerticalGroup(
            pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTiposArbolLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pTiposArbolLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(208, 208, 208))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pTiposArbolLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pTiposArbolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addComponent(verArboles)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        tabbed.addTab("Tipos de árbol", pTiposArbol);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tiposArbolMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiposArbolMousePressed
        System.out.println(tiposArbol.getSelectedIndex());
    }//GEN-LAST:event_tiposArbolMousePressed

    private void tiposArbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tiposArbolMouseClicked
        // TODO add your handling code here:
        try {
            System.out.println("> Conectando");

            // Creamos la conexión a la base de datos
            Connection conexion = (Connection) DriverManager.getConnection(
                                 "jdbc:mysql://" +
                                         _host + "/" +
                                         _bd + "?user=" +
                                         _usuario + "&password=" +
                                         _password);


             System.out.println("> ¡Conectado!");

             // Creamos un objeto para ejecutar sentencias de SQL
             Statement sentencia = conexion.createStatement();

             // Esta es la consulta que vamos a hacer:
             String consulta = "SELECT * FROM tipos_arbol where id="+(tiposArbol.getSelectedIndex()+1); ;
             
             // Ejecutamos la consulta y guardamos el resultado en una variable
             ResultSet resultado = sentencia.executeQuery(consulta);
             
             // Recorremos todas las filas de la tabla de resultados obtenida
             while(resultado.next() == true) {
                 
                 // Añadimos el valor de la columna nombre al DefaultListModel
                 texto.setText(resultado.getString("descripcion"));
                 System.out.println(resultado.getString("descripcion"));
             }
            
        } catch(SQLException excepcion) {
            System.out.println("> Error en la conexión: " + excepcion.getMessage());
        } 
        /*******************************************************************/ 
        
        int a=tiposArbol.getAnchorSelectionIndex();
        
        if(a==0){
            ImageIcon icon = new ImageIcon(getClass().getResource("/img/caduca.jpg"));
            ImageIcon icono = new ImageIcon(icon.getImage().getScaledInstance(151, 129, Image.SCALE_SMOOTH));
            jLabel2.setIcon(icono);
        }else if(a==1){
            
               
        ImageIcon icon = new ImageIcon(getClass().getResource("/img/coniferas.jpg"));
        ImageIcon icono = new ImageIcon(icon.getImage().getScaledInstance(151, 129, Image.SCALE_SMOOTH));
        jLabel2.setIcon(icono);
        }else if(a==2){

        ImageIcon icon = new ImageIcon(getClass().getResource("/img/frutales.jpg"));
        ImageIcon icono = new ImageIcon(icon.getImage().getScaledInstance(151, 129, Image.SCALE_SMOOTH));
        jLabel2.setIcon(icono);        
        }else if(a==3){
              
        ImageIcon icon = new ImageIcon(getClass().getResource("/img/perenne.jpg"));          
        ImageIcon icono = new ImageIcon(icon.getImage().getScaledInstance(151, 129, Image.SCALE_SMOOTH));
        jLabel2.setIcon(icono);
}


    }//GEN-LAST:event_tiposArbolMouseClicked

    private void verArbolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verArbolesActionPerformed
        tabbed.setSelectedIndex(1);
        for(int i=0; i<_datosTiposArbol.getSize();i++){
            verArboles.setModel((ButtonModel) _datosTiposArbol);     
            
            
             try {
            System.out.println("> Conectando");

            // Creamos la conexión a la base de datos
            Connection conexion = (Connection) DriverManager.getConnection(
                                 "jdbc:mysql://" +
                                         _host + "/" +
                                         _bd + "?user=" +
                                         _usuario + "&password=" +
                                         _password);


             System.out.println("> ¡Conectado!");

             // Creamos un objeto para ejecutar sentencias de SQL
             Statement sentencia = conexion.createStatement();

             // Esta es la consulta que vamos a hacer:
             String consulta = "SELECT * FROM arboles where id="+(arboles.getSelectedIndex()+1);
             
             // Ejecutamos la consulta y guardamos el resultado en una variable
             ResultSet resultado = sentencia.executeQuery(consulta);
             
             // Recorremos todas las filas de la tabla de resultados obtenida
             while(resultado.next() == true) {
                 
                 // Añadimos el valor de la columna nombre al DefaultListModel
                 texto.setText(resultado.getString("descripcion"));
                 System.out.println(resultado.getString("descripcion"));
             }
            
        } catch(SQLException excepcion) {
            System.out.println("> Error en la conexión: " + excepcion.getMessage());
        }
            
         }
    }//GEN-LAST:event_verArbolesActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> arboles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lImagen;
    private javax.swing.JTextArea lista;
    private javax.swing.JPanel pArboles;
    private javax.swing.JPanel pTiposArbol;
    private javax.swing.JTabbedPane tabbed;
    private javax.swing.JTextArea texto;
    private javax.swing.JList<String> tiposArbol;
    private javax.swing.JButton verArboles;
    // End of variables declaration//GEN-END:variables
}
